<?php
/**
 * @file
 * Drupal hooks and functions for user_password_randomizer.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\user\Entity\User;

/**
 * Implements hook_cron().
 */
function user_password_randomizer_cron() {
  /** @var \Drupal\user_password_randomizer\UserPasswordRandomizerInterface $utility */
  $utility = \Drupal::service('user_password_randomizer.utility');
  /** @var \Psr\Log\LoggerInterface $logger */
  $logger = \Drupal::service('logger.channel.user_password_randomizer');

  $userId = 1;
  /** @var \Drupal\user\UserInterface $user */
  $user = User::load($userId);
  $loggerArgs = [
    '@user' => 'user ' . $user->id(),
  ];

  // Set password to random string.
  $user->setPassword(\user_password(16));

  // Dont bother if username is the same or randomisation is off:
  $newUsername = $utility->generateUsername($user);
  if ($user->getAccountName() !== $newUsername) {
    $loggerArgs['@old_username'] = $user->getAccountName();
    $loggerArgs['@new_username'] = $newUsername;
    $user->setUsername($newUsername);
    $logger->info('Randomised username and password for @user. Username changed from @old_username to @new_username', $loggerArgs);
  }
  else {
    $logger->info('Randomised password for @user', $loggerArgs);
  }

  try {
    $user->save();
  }
  catch (EntityStorageException $e) {
    $logger->error('Failed to randomise the username and password for @user: @exception_message', [
      '@exception_message' => $e->getMessage(),
    ]);
  }
}
